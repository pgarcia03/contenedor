// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using IngresoSwatch.ModelApi;
//
//    var swatchModel = SwatchModel.FromJson(jsonString);

namespace IngresoSwatch.ModelApi
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class SwatchModel
    {
        [JsonProperty("idswatches")]
        public long Idswatches { get; set; }

        [JsonProperty("idrollo")]
        public long Idrollo { get; set; }

        [JsonProperty("x1")]
        public double X1 { get; set; }

        [JsonProperty("x2")]
        public double X2 { get; set; }

        [JsonProperty("x3")]
        public double X3 { get; set; }

        [JsonProperty("y1")]
        public double Y1 { get; set; }

        [JsonProperty("y2")]
        public double Y2 { get; set; }

        [JsonProperty("y3")]
        public double Y3 { get; set; }

        [JsonProperty("p1")]
        public double P1 { get; set; }

        [JsonProperty("p2")]
        public double P2 { get; set; }

        [JsonProperty("fecha")]
        public DateTimeOffset Fecha { get; set; }

        [JsonProperty("usuario")]
        public string Usuario { get; set; }
    }

    public partial class SwatchModel
    {
        public static List<SwatchModel> FromJson(string json) => JsonConvert.DeserializeObject<List<SwatchModel>>(json, IngresoSwatch.ModelApi.ConverterSwatch.Settings);
    }

    public static class SerializeSwatch
    {
        public static string ToJson(this List<SwatchModel> self) => JsonConvert.SerializeObject(self, IngresoSwatch.ModelApi.ConverterSwatch.Settings);
    }

    internal static class ConverterSwatch
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
